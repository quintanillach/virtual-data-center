# Azure powershell script to setup resources, additional
# configuration is still needed on VMs

# Variables for common values
$rgName='MyResourceGroup0419jh'
$location='West US 2'

# Create user object
$cred = Get-Credential -Message 'Enter a username and password for the virtual machine.'

# Create a resource group.
New-AzResourceGroup -Name $rgName -Location $location

# Create a storage account.
New-AzStorageAccount -ResourceGroupName $rgName -Name "mystorage0419jjh" -Location $location -SkuName Standard_LRS -Kind StorageV2 
  
# Create a front end subnet and a back end subnet.
$fesn = New-AzVirtualNetworkSubnetConfig -Name 'MyFESubnet0419jh' -AddressPrefix 192.168.1.0/24

$besn = New-AzVirtualNetworkSubnetConfig -Name 'MyBESubnet0419jh' -AddressPrefix 192.168.2.0/24

# Create a virtual network.
$vnet = New-AzVirtualNetwork -ResourceGroupName $rgName -Name 'MyVnet0419jh' -AddressPrefix 192.168.0.0/16 -Location $location -Subnet $fesn, $besn

# Create a public IP address.
$publicIp = New-AzPublicIpAddress -ResourceGroupName $rgName -Name 'myPublicIP0419jh' -Location $location -Sku 'Standard' -AllocationMethod Static -DomainNameLabel 'mypublicip0419jh'

# Create a front-end IP configuration for the website.
$feip = New-AzLoadBalancerFrontendIpConfig -Name 'myFrontEndPool0419jh' -PublicIpAddress $publicIp

# Create the back-end address pool.
$bepool = New-AzLoadBalancerBackendAddressPoolConfig -Name 'myBackEndPool0419jh'

# Creates a load balancer probe on port 80.
$probe = New-AzLoadBalancerProbeConfig -Name 'myHealthProbe0419jh' -Protocol Http -Port 80 -RequestPath / -IntervalInSeconds 360 -ProbeCount 5

# Creates a load balancer rule for port 80.
$rule = New-AzLoadBalancerRuleConfig -Name 'myLoadBalancerRuleWeb' -Protocol Tcp -Probe $probe -FrontendPort 80 -BackendPort 80 -FrontendIpConfiguration $feip -BackendAddressPool $bePool

# Create two NAT rules for port 3389.
$natrule1 = New-AzLoadBalancerInboundNatRuleConfig -Name 'myLoadBalancerRDP1' -FrontendIpConfiguration $feip -Protocol tcp -FrontendPort 4221 -BackendPort 3389

$natrule2 = New-AzLoadBalancerInboundNatRuleConfig -Name 'myLoadBalancerRDP2' -FrontendIpConfiguration $feip -Protocol tcp -FrontendPort 4222 -BackendPort 3389

# Create a load balancer.
$lb = New-AzLoadBalancer -ResourceGroupName $rgName -Name 'MyLoadBalancer0419jh' -Location $location -Sku 'Standard' -FrontendIpConfiguration $feip -BackendAddressPool $bepool -Probe $probe -LoadBalancingRule $rule -InboundNatRule $natrule1,$natrule2

# Create a network security group rule for port 3389.
$rule1 = New-AzNetworkSecurityRuleConfig -Name 'myNetworkSecurityGroupRuleRDP' -Description 'Allow RDP' -Access Allow -Protocol Tcp -Direction Inbound -Priority 1000 -SourceAddressPrefix Internet -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 3389

# Create a network security group rule for port 80.
$rule2 = New-AzNetworkSecurityRuleConfig -Name 'myNetworkSecurityGroupRuleHTTP' -Description 'Allow HTTP' -Access Allow -Protocol Tcp -Direction Inbound -Priority 2000 -SourceAddressPrefix Internet -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 80

# Create a front end network security group
$fensg = New-AzNetworkSecurityGroup -ResourceGroupName $RgName -Location $location -Name 'myFENetworkSecurityGroup0419jh' -SecurityRules $rule1,$rule2

# Create a network security group rule for port 1433.
$rule3 = New-AzNetworkSecurityRuleConfig -Name 'myNetworkSecurityGroupRuleSSH' -Description 'Allow SQL' -Access Allow -Protocol Tcp -Direction Inbound -Priority 100 -SourceAddressPrefix 192.168.1.0 -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 1433

# Create a network security group rule for port 3389.
$rule4 = New-AzNetworkSecurityRuleConfig -Name 'myNetworkSecurityGroupRuleRDP' -Description 'Allow RDP' -Access Allow -Protocol Tcp -Direction Inbound -Priority 1000 -SourceAddressPrefix 192.168.1.0 -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 3389

# Create a back end network security group
$bensg = New-AzNetworkSecurityGroup -ResourceGroupName $RgName -Location $location -Name 'myBENetworkSecurityGroup0419jh' -SecurityRules $rule3,$rule4

# Create two virtual network cards and associate with public IP address and front-end NSG.
$nicVM1 = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name 'MyNic10419jh' -LoadBalancerBackendAddressPool $bepool -NetworkSecurityGroup $fensg -LoadBalancerInboundNatRule $natrule1 -Subnet $vnet.Subnets[0]

$nicVM2 = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name 'MyNic20419jh' -LoadBalancerBackendAddressPool $bepool -NetworkSecurityGroup $fensg -LoadBalancerInboundNatRule $natrule2 -Subnet $vnet.Subnets[0]

# Create two virtual network cards and associate back-end NSG.
$nicVM3 = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name 'MyNic10419jh2' -NetworkSecurityGroup $bensg -Subnet $vnet.Subnets[1]

$nicVM4 = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name 'MyNic20419jh2' -NetworkSecurityGroup $bensg -Subnet $vnet.Subnets[1]

# Create a virtual network card and associate with back-end NSG.
$nicVM5 = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name 'MyNic30419jh' -NetworkSecurityGroup $bensg -Subnet $vnet.Subnets[1]

# Create an availability set.
$as = New-AzAvailabilitySet -ResourceGroupName $rgName -Location $location -Name 'MyAvailabilitySet0419jh' -Sku Aligned -PlatformFaultDomainCount 2 -PlatformUpdateDomainCount 2

# Create three virtual machines.

# ############## VM1 (IIS) ###############

# Create a virtual machine configuration
$vmConfig = New-AzVMConfig -VMName 'myVM10419jh' -VMSize Standard_DS1_v2 -AvailabilitySetId $as.Id |  Set-AzVMOperatingSystem -Windows -ComputerName 'myVM10419jh' -Credential $cred | Set-AzVMSourceImage -PublisherName MicrosoftWindowsServer -Offer WindowsServer -Skus 2019-Datacenter -Version latest | Add-AzVMNetworkInterface -Id $nicVM1.Id -Primary | Add-AzVMNetworkInterface -Id $nicVM3.Id

# Create a virtual machine
$vm1 = New-AzVM -ResourceGroupName $rgName -Location $location -VM $vmConfig

# Install IIS
$PublicSettings = '{"commandToExecute":"powershell Install-WindowsFeature Web-Server"}'

Set-AzVMExtension -ExtensionName "IIS" -ResourceGroupName $rgName -VMName 'myVM10419jh' -Publisher "Microsoft.Compute" -ExtensionType "CustomScriptExtension" -TypeHandlerVersion 1.4 -SettingString $PublicSettings -Location $location

# ############## VM2 (IIS) ###############

# Create a virtual machine configuration
$vmConfig = New-AzVMConfig -VMName 'myVM20419jh' -VMSize Standard_DS1_v2 -AvailabilitySetId $as.Id |  Set-AzVMOperatingSystem -Windows -ComputerName 'myVM20419jh' -Credential $cred | Set-AzVMSourceImage -PublisherName MicrosoftWindowsServer -Offer WindowsServer -Skus 2019-Datacenter -Version latest | Add-AzVMNetworkInterface -Id $nicVM2.Id -Primary | Add-AzVMNetworkInterface -Id $nicVM4.Id

# Create a virtual machine
$vm2 = New-AzVM -ResourceGroupName $rgName -Location $location -VM $vmConfig

# Install IIS
$PublicSettings = '{"commandToExecute":"powershell Install-WindowsFeature Web-Server"}'

Set-AzVMExtension -ExtensionName "IIS" -ResourceGroupName $rgName -VMName 'myVM20419jh' -Publisher "Microsoft.Compute" -ExtensionType "CustomScriptExtension" -TypeHandlerVersion 1.4 -SettingString $PublicSettings -Location $location

# ############## VM3 (SQL) ###############

# Create a virtual machine configuration
$VMName = 'mySQL0419jh'
$VMConfig = New-AzVMConfig -VMName $VMName -VMSize Standard_DS13_V2 | `
   Set-AzVMOperatingSystem -Windows -ComputerName $VMName -Credential $Cred -ProvisionVMAgent -EnableAutoUpdate | `
   Set-AzVMSourceImage -PublisherName "MicrosoftSQLServer" -Offer "SQL2017-WS2016" -Skus "SQLDEV" -Version "latest" | `
   Add-AzVMNetworkInterface -Id $nicVM5.Id
   
# Create a virtual machine
New-AzVM -ResourceGroupName $rgName -Location $Location -VM $VMConfig
